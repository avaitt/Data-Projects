{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import necessary libraries for data visualization/data analysis\n",
    "import re\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sb\n",
    "import io \n",
    "import pandas as pd\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## High-Level Data Analysis (Part 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-06-11 DATESTAMP\n",
      "05:36:38 TIMESTAMP\n",
      "[[CashManagementExpInstructionMaintenanceAPI-1.0-DEVINT].http.requester.HTTP_Request_Configuration.worker(11)] DEBUG org.mule.module.http.internal.HttpMessageLogger - REQUESTER\n",
      "HTTP/1.1 200 \n",
      "Content-Length: 1415\n",
      "Content-Type: application/json;charset=UTF-8\n",
      "{\n",
      "  \"RecordsData\": [\n",
      "    {\n",
      "      \"accountNumber\": \"47434858\",\n",
      "      \"originId\": \"\",\n",
      "      \"cmRequestId\": \"10084\",\n",
      "      \"transactionType\": \"ACHCD\",\n",
      "      \"maintenanceIndicator\": \"\",\n",
      "      \"instructionStatus\": \"Pending\",\n",
      "      \"bankTransitABA\": \"053000196\",\n",
      "      \"bankAccountHolder1\": \"THE HULK\",\n",
      "      \"bankAccountHolder2\": \"HULKS WIFE\",\n",
      "      \"custBankAccountNumber\": \"123456784\",\n",
      "      \"checkingSavingIndicator\": \"C\",\n",
      "      \"liveDate\": \"\",\n",
      "      \"typeOfPayee\": \"A\",\n",
      "      \"note1\": \"\",\n",
      "      \"state\": \"\",\n",
      "      \"countryCode\": \"\",\n",
      "      \"city\": \"\",\n",
      "      \"obiAccountNumber\": \"\",\n",
      "      \"obiAccountName\": \"\",\n",
      "      \"bankName\": \"BANK OF AMERICA, N.A.\",\n",
      "      \"zipCode\": \"\",\n",
      "      \"zipCodePlus4\": \"\",\n",
      "      \"memoLine\": \"\",\n",
      "      \"payeeNameLine1\": \"\",\n",
      "      \"payeeNameLine2\": \"\",\n",
      "      \"addressLine1\": \"\",\n",
      "      \"addressLine2\": \"\",\n",
      "      \"addressLine3\": \"\",\n",
      "      \"cmInstructionId\": \"6467\",\n",
      "      \"glopFeeCode\": \"\",\n",
      "      \"fedTaxIndicator\": \"\",\n",
      "      \"endDate\": \"\",\n",
      "      \"manualCreditIndicator\": \"\",\n",
      "      \"betaInstructionId\": \"\",\n",
      "      \"fundDestination\": \"DOMS\",\n",
      "      \"isPeriodic\": \"0\",\n",
      "      \"fundOwnership\": \"FR\",\n",
      "      \"fedTaxAmount\": \"\",\n",
      "      \"beginDate\": \"\",\n",
      "      \"amount\": \"\",\n",
      "      \"stateTaxIndicator\": \"\",\n",
      "      \"deliveryMethod\": \"\",\n",
      "      \"stateTaxAmount\": \"\",\n",
      "      \"fundRecipient\": \"\",\n",
      "      \"nickName\": \"TESTAuto143\",\n",
      "      \"periodicInstructionId\": \"\",\n",
      "      \"betaPeriodicInstructionId\": \"\"\n",
      "    }\n",
      "  ]\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# open up test uncleansed data (47 iterations)\n",
    "records = open(\"Test_Records\", \"r\")\n",
    "\n",
    "# display ONE \"instance\" (i.e. record) in example test data \n",
    "# our focus lies in extracting the TIMESTAMP and DATESTAMP information\n",
    "print(records.read()[0:1713])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "05:36:38 \n"
     ]
    }
   ],
   "source": [
    "# find all TIMESTAMPS and generates a new file to store them\n",
    "with open('Test_Records') as infile, open('times.txt', \"w\") as outfile:\n",
    "    for line in infile:                          #Iterate Each line\n",
    "        if not line.strip().split(\"TIMESTAMP\")[-1]:      #Check for second Val\n",
    "            line.strip().strip(\"TIMESTAMP\")\n",
    "            outfile.write(line)  \n",
    "\n",
    "f = open('times.txt','r')\n",
    "a = ['TIMESTAMP']\n",
    "lst = []\n",
    "for line in f:\n",
    "    for word in a:\n",
    "        if word in line:\n",
    "            line = line.replace(word,'')\n",
    "    lst.append(line)\n",
    "f.close()\n",
    "f = open('times.txt','w')\n",
    "for line in lst:\n",
    "    f.write(line)\n",
    "with open(\"times.txt\") as f:\n",
    "    timestr = f.read().rstrip(\"\\n\")\n",
    "\n",
    "# first timestamp entry in our string\n",
    "print(timestr.split('\\n', 1)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5.610555555555556\n"
     ]
    }
   ],
   "source": [
    "# converts TIMESTAMPS to 24 hour format, given \"midnight\" is considered the '0th hour' \n",
    "timeList = timestr.split()\n",
    "int_values = []\n",
    "decimal_times = []\n",
    "for t in timeList:\n",
    "    times = list(map(int, re.split(r\"[:,]\", t)))\n",
    "    total_seconds = times[0]*3600 + times[1]*60 + times[2] \n",
    "    int_values.append(total_seconds)\n",
    "    x= 3600\n",
    "    decimal_times = np.divide(int_values, x)\n",
    "\n",
    "# first timestamp entry converted from [H]H:MM:SS to H\n",
    "print(decimal_times.tolist()[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2019-06-11 \n"
     ]
    }
   ],
   "source": [
    "# takes all DATESTAMPS and generates a new file comprised of them\n",
    "with open('Test_Records') as infile, open('dates.txt', \"w\") as outfile:\n",
    "    for line in infile:                          #Iterate Each line\n",
    "        if not line.strip().split(\"DATESTAMP\")[-1]:      #Check for second Val\n",
    "            line.strip().strip(\"DATESTAMP\")\n",
    "            outfile.write(line)  \n",
    "\n",
    "f = open('dates.txt','r')\n",
    "a = ['DATESTAMP']\n",
    "lst = []\n",
    "for line in f:\n",
    "    for word in a:\n",
    "        if word in line:\n",
    "            line = line.replace(word,'')\n",
    "    lst.append(line)\n",
    "f.close()\n",
    "f = open('dates.txt','w')\n",
    "for line in lst:\n",
    "    f.write(line)\n",
    "with open(\"dates.txt\") as f:\n",
    "    datestr = f.read().rstrip(\"\\n\")\n",
    "\n",
    "# first datestamp entry in our string\n",
    "print(datestr.split('\\n', 1)[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2019-06-11', '2019-06-12', '2019-06-13', '2019-06-14', '2019-06-15', '2019-06-16', '2019-06-17', '2019-06-18', '2019-06-19', '2019-06-20', '2019-06-21', '2019-06-22', '2019-06-23', '2019-06-24', '2019-06-25', '2019-06-26', '2019-06-27', '2019-06-28', '2019-06-29', '2019-06-30', '2019-07-01', '2019-07-02', '2019-07-03', '2019-07-04', '2019-07-05', '2019-07-06', '2019-07-07', '2019-07-08', '2019-07-09', '2019-07-10', '2019-07-11', '2019-07-12', '2019-07-13', '2019-07-14', '2019-07-15', '2019-07-16', '2019-07-17', '2019-07-18', '2019-07-19', '2019-07-20', '2019-07-21', '2019-07-22', '2019-07-23', '2019-07-24', '2019-07-25', '2019-07-26', '2019-07-27']\n"
     ]
    }
   ],
   "source": [
    "dates = datestr.split()\n",
    "print(dates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time accessed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-06-11</td>\n",
       "      <td>5.610556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-06-12</td>\n",
       "      <td>5.696944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-06-13</td>\n",
       "      <td>5.807500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-06-14</td>\n",
       "      <td>5.818611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-06-15</td>\n",
       "      <td>5.828056</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Date  Time accessed\n",
       "0  2019-06-11       5.610556\n",
       "1  2019-06-12       5.696944\n",
       "2  2019-06-13       5.807500\n",
       "3  2019-06-14       5.818611\n",
       "4  2019-06-15       5.828056"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_stamps = pd.DataFrame(list(zip(dates, decimal_times)), columns =['Date', 'Time accessed']) \n",
    "data_stamps.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "f = plt.figure(figsize=(12, 10)) # Change the size as necessary\n",
    "\n",
    "ax=f.gca()\n",
    "data_stamps.plot(ax=f.gca()) # figure.gca means \"get current axis\"\n",
    "plt.title('Date of Log Accessed vs. Time', color='black', fontsize = 14)\n",
    "\n",
    "plt.xlabel('Date', fontsize=12)\n",
    "plt.ylabel('Time (in hours)', fontsize=12) \n",
    "\n",
    "leg = ax.get_legend()\n",
    "leg.legendHandles[0].set_color('goldenrod')\n",
    "\n",
    "y = np.array(decimal_times)\n",
    "x = np.arange(y.shape[0])\n",
    "my_xticks = np.array(dates)\n",
    "frequency = 9\n",
    "plt.plot(x, y, color = 'orange')\n",
    "plt.xticks(x[::frequency], my_xticks[::frequency])\n",
    "plt.show()\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please enter the low end (in hours) of what constitutes malicious activity: 6\n",
      "Please enter the high end (in hours) of what constitutes malicious activity: 14\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High Risk Dates</th>\n",
       "      <th>Time Accessed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2019-06-11</td>\n",
       "      <td>5.610556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2019-06-12</td>\n",
       "      <td>5.696944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2019-06-13</td>\n",
       "      <td>5.807500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2019-06-14</td>\n",
       "      <td>5.818611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2019-06-15</td>\n",
       "      <td>5.828056</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  High Risk Dates  Time Accessed\n",
       "0      2019-06-11       5.610556\n",
       "1      2019-06-12       5.696944\n",
       "2      2019-06-13       5.807500\n",
       "3      2019-06-14       5.818611\n",
       "4      2019-06-15       5.828056"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# ask user for a range of times as to what they constitute malicious activity\n",
    "# output list of those times that are out of the user's range\n",
    "# output list of those corresponding dates whose times are out of the user's range\n",
    "positionList = []\n",
    "sus_times = []\n",
    "\n",
    "low_input = input(\"Please enter the low end (in hours) of what constitutes malicious activity: \")\n",
    "low_number = int(low_input)\n",
    "\n",
    "high_input = input (\"Please enter the high end (in hours) of what constitutes malicious activity: \")\n",
    "high_number = int(high_input)\n",
    "\n",
    "for i in [i for i, x in enumerate(decimal_times) if x <= low_number or x >= high_number]:\n",
    "    positionList.append(i)\n",
    "\n",
    "for x in decimal_times:\n",
    "    if x <= low_number or x >= high_number:\n",
    "        sus_times.append(x)\n",
    "\n",
    "sus_dates = [dates[i] for i in positionList]\n",
    "\n",
    "at_risk = pd.DataFrame(list(zip(sus_dates, sus_times)), columns =['High Risk Dates', 'Time Accessed']) \n",
    "at_risk.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Involving Scikit-learn (Part 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Time accessed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6/11/2019</td>\n",
       "      <td>17.193464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6/12/2019</td>\n",
       "      <td>14.987176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6/13/2019</td>\n",
       "      <td>15.224832</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6/14/2019</td>\n",
       "      <td>15.628141</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6/15/2019</td>\n",
       "      <td>15.865967</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date  Time accessed\n",
       "0  6/11/2019      17.193464\n",
       "1  6/12/2019      14.987176\n",
       "2  6/13/2019      15.224832\n",
       "3  6/14/2019      15.628141\n",
       "4  6/15/2019      15.865967"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('2019_Dates.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_timelist = data[\"Time accessed\"].tolist()\n",
    "my_datelist = data[\"Date\"].tolist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.set_index('Date').plot(figsize=(16, 10))\n",
    "\n",
    "plt.title('Date of Log Accessed vs Time', color='black', fontsize = 14)\n",
    "\n",
    "plt.xlabel('Date', fontsize=12)\n",
    "plt.ylabel('Time (in hours)', fontsize=12) \n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((449, 1), (449, 1), (50, 1), (50, 1))"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create our traiing and validation sets for data anlysis\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X = data['Time accessed'].values.reshape((len(data), 1))\n",
    "y = data['Time accessed'].values.reshape((len(data), 1))\n",
    "\n",
    "X = X[:-1, :]\n",
    "y = y[1:, :]\n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.1, random_state=42)\n",
    "\n",
    "X_train.shape, y_train.shape, X_val.shape, y_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(array([14.9871764]), array([14.9871764]))"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X[1, :], y[0, :]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_timesteps = 1\n",
    "n_samples = X_train.shape[0]\n",
    "n_features = X_train.shape[1]\n",
    "n_val_samples = X_val.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((449, 1, 1), (449, 1), (50, 1, 1), (50, 1))"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_list = [np.expand_dims(X_train[i-n_timesteps:i, :], axis=0) for i in range(n_timesteps, n_samples + 1)]\n",
    "X_train = np.concatenate(X_train_list, axis=0)\n",
    "y_train = y_train[n_timesteps-1:, :]\n",
    "\n",
    "X_val_list = [np.expand_dims(X_val[i-n_timesteps:i, :], axis=0) for i in range(n_timesteps, n_val_samples + 1)]\n",
    "X_val = np.concatenate(X_val_list, axis=0)\n",
    "y_val = y_val[n_timesteps-1:, :]\n",
    "\n",
    "X_train.shape, y_train.shape, X_val.shape, y_val.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create encoder\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow.keras.layers import Activation, BatchNormalization\n",
    "from tensorflow.keras.layers import Dropout, Dense, Input, LSTM\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "\n",
    "\n",
    "def Autoencoder(n_timesteps, n_features):\n",
    "    i = Input(shape=(n_timesteps, n_features))\n",
    "    \n",
    "    x = LSTM(50, return_sequences=True)(i)\n",
    "    x = Dropout(0.4)(x)\n",
    "    \n",
    "    x = LSTM(50)(x)\n",
    "    x = Dropout(0.4)(x)\n",
    "\n",
    "    x = Dense(n_features, kernel_initializer='he_normal')(x)\n",
    "    x = Activation('linear')(x)\n",
    "\n",
    "    model = Model(inputs=i, outputs=x)\n",
    "    opt = Adam(lr=0.01)\n",
    "    model.compile(loss='mean_absolute_error', optimizer=opt)\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Autoencoder(n_timesteps, n_features)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "4/4 [==============================] - 1s 261ms/step - loss: 16.0269 - val_loss: 14.9852\n",
      "Epoch 2/10\n",
      "4/4 [==============================] - 0s 14ms/step - loss: 14.0531 - val_loss: 11.8606\n",
      "Epoch 3/10\n",
      "4/4 [==============================] - 0s 12ms/step - loss: 10.6197 - val_loss: 8.1447\n",
      "Epoch 4/10\n",
      "4/4 [==============================] - 0s 12ms/step - loss: 7.0897 - val_loss: 4.9931\n",
      "Epoch 5/10\n",
      "4/4 [==============================] - 0s 13ms/step - loss: 4.2782 - val_loss: 2.8476\n",
      "Epoch 6/10\n",
      "4/4 [==============================] - 0s 12ms/step - loss: 2.5469 - val_loss: 1.5136\n",
      "Epoch 7/10\n",
      "4/4 [==============================] - 0s 12ms/step - loss: 1.9873 - val_loss: 1.3243\n",
      "Epoch 8/10\n",
      "4/4 [==============================] - 0s 12ms/step - loss: 2.1121 - val_loss: 1.5440\n",
      "Epoch 9/10\n",
      "4/4 [==============================] - 0s 13ms/step - loss: 2.1170 - val_loss: 1.4917\n",
      "Epoch 10/10\n",
      "4/4 [==============================] - 0s 11ms/step - loss: 2.1098 - val_loss: 1.3139\n"
     ]
    }
   ],
   "source": [
    "# increase dataset we can validate on more samples and increase accuracy/anomaly detection capabilities\n",
    "model = Autoencoder(n_timesteps, n_features)\n",
    "history = model.fit(x=X_train, y=y_train, batch_size=128, epochs=10, verbose=1,\n",
    "                    callbacks=None, validation_data=(X_val, y_val), shuffle=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(449, 1)"
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred = model.predict(X_train)\n",
    "y_train_pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "449"
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# now have a list of prediction errors from the training data created\n",
    "# confirm our suspicions\n",
    "from sklearn.metrics import mean_absolute_error\n",
    "errors = [mean_absolute_error(y_train[i, :], y_train_pred[i, :]) for i in range(y_train_pred.shape[0])]\n",
    "len(errors)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Density'>"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# make note of the fact that errors are skewed to the right (i.e. tail is to the right)\n",
    "# there exists the presence of heavy outliers (i.e. 'wales')\n",
    "sb.kdeplot(errors, shade=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1.1000843020295534, 1.156075121225983)"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fit above graph of erros to a normal distrubution\n",
    "from scipy.stats import norm\n",
    "params = norm.fit(errors)\n",
    "dist = norm(loc=params[0], scale=params[1])\n",
    "\n",
    "dist.mean(), dist.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "# deciding how much a point needs to be an outlier in order to be called \"anomalous\"\n",
    "# what is considered anomalous is dependent on the user's dataset\n",
    "def is_anomaly(error, mean, std, threshold):\n",
    "    delta = np.abs(error - mean)\n",
    "    multiple = delta / std\n",
    "    if multiple < threshold:\n",
    "        return 0\n",
    "    else:\n",
    "        return 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[18.1148581, 17.71988583, 16.69019378, 14.56544223, 16.42330421, 18.02911606, 16.40806829, 17.05966813, 23.21887969, 15.89730463, 16.814969100000003, 15.706418300000001, 13.96242234, 16.09856052, 17.27109024, 18.17492066, 18.06967293, 16.3446652, 17.02699262, 16.17850643, 16.52398955, 16.72496007, 16.25293924, 17.72473229, 17.27524372, 18.25268282, 16.78918339, 16.87240884, 17.76051462, 17.29735091, 18.21293791, 17.95111781, 17.046241199999997, 15.22483236, 12.72323361, 18.04401983, 16.21903305, 15.07040419, 18.20319093, 16.69063684, 15.94037273, 18.2947891, 16.38163118, 14.1914381, 17.19346441, 15.90163171, 22.471438100000004, 14.53748231, 18.15804784, 15.51293733]\n"
     ]
    }
   ],
   "source": [
    "# this is our validation data\n",
    "import numpy as np\n",
    "np.array(X_val).tolist()\n",
    "print([float(i) for i in X_val])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "# running validation data through our encoder to \"score\" each value over 50 samples\n",
    "# [0:51] because 51 is not inclusive\n",
    "y_val_pred = model.predict(X_val[0:51, :, :])\n",
    "val_errors = [mean_absolute_error(y_val[i, :], y_val_pred[i, :]) for i in range(y_val_pred.shape[0])]\n",
    "result = [is_anomaly(x, dist.mean(), dist.std(), 2) for x in val_errors]\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6, 8, 34, 43, 46]\n"
     ]
    }
   ],
   "source": [
    "indices = [i for i, x in enumerate(result) if x == 1]\n",
    "print(indices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[18.1148581, 17.71988583, 16.69019378, 14.56544223, 16.42330421, 18.02911606, 16.40806829, 17.05966813, 23.21887969, 15.89730463, 16.814969100000003, 15.706418300000001, 13.96242234, 16.09856052, 17.27109024, 18.17492066, 18.06967293, 16.3446652, 17.02699262, 16.17850643, 16.52398955, 16.72496007, 16.25293924, 17.72473229, 17.27524372, 18.25268282, 16.78918339, 16.87240884, 17.76051462, 17.29735091, 18.21293791, 17.95111781, 17.046241199999997, 15.22483236, 12.72323361, 18.04401983, 16.21903305, 15.07040419, 18.20319093, 16.69063684, 15.94037273, 18.2947891, 16.38163118, 14.1914381, 17.19346441, 15.90163171, 22.471438100000004, 14.53748231, 18.15804784, 15.51293733]\n"
     ]
    }
   ],
   "source": [
    "val_times = []\n",
    "for i in X_val:\n",
    "    val_times.append(float(i[0]))\n",
    "print(val_times) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16.40806829, 23.21887969, 12.72323361, 14.1914381, 22.471438100000004]\n"
     ]
    }
   ],
   "source": [
    "mal_times = [val_times[i] for i in indices]\n",
    "print(mal_times)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "rounded_listx = [round(elem, 4) for elem in my_timelist ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16.4081, 23.2189, 12.7232, 14.1914, 22.4714]\n"
     ]
    }
   ],
   "source": [
    "rounded_listy = [round(elem, 4) for elem in mal_times]\n",
    "print(rounded_listy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[155, 316, 322, 332, 333]\n"
     ]
    }
   ],
   "source": [
    "newpositionList = []\n",
    "for i in [i for i,x in enumerate(my_timelist) if x in mal_times]:\n",
    "    newpositionList.append(i)\n",
    "print(newpositionList)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[16.40806829, 14.1914381, 23.21887969, 12.72323361, 22.471438100000004]\n"
     ]
    }
   ],
   "source": [
    "mal_decimals = [my_timelist[i] for i in newpositionList]\n",
    "print(mal_decimals)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['11/13/2019', '4/22/2020', '4/28/2020', '5/8/2020', '5/9/2020']\n"
     ]
    }
   ],
   "source": [
    "mal_dates = [my_datelist[i] for i in newpositionList]\n",
    "print(mal_dates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High Risk Dates</th>\n",
       "      <th>Time Accessed</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11/13/2019</td>\n",
       "      <td>16.408068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4/22/2020</td>\n",
       "      <td>14.191438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4/28/2020</td>\n",
       "      <td>23.218880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5/8/2020</td>\n",
       "      <td>12.723234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5/9/2020</td>\n",
       "      <td>22.471438</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  High Risk Dates  Time Accessed\n",
       "0      11/13/2019      16.408068\n",
       "1       4/22/2020      14.191438\n",
       "2       4/28/2020      23.218880\n",
       "3        5/8/2020      12.723234\n",
       "4        5/9/2020      22.471438"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# High Risk Dates and Times based on our 2019 data\n",
    "pd.DataFrame(list(zip(mal_dates, mal_decimals)), columns =['High Risk Dates', 'Time Accessed']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [],
   "source": [
    "def anomaly_score(error, dist):\n",
    "    delta = np.abs(error - dist.mean())\n",
    "    return dist.cdf(dist.mean() + delta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.5085, 0.6276, 0.7059, 0.904, 0.6484, 0.5192, 1.0, 0.8101, 0.9962, 0.532, 0.7574, 0.6987, 0.8993, 0.6032, 0.7884, 0.6666, 0.5201, 0.585, 0.7925, 0.6233, 0.6158, 0.7275, 0.6419, 0.6813, 0.8056, 0.5202, 0.8152, 0.6435, 0.6087, 0.7447, 0.5868, 0.6687, 0.8244, 0.6468, 0.9999, 0.6277, 0.6156, 0.7638, 0.5102, 0.7561, 0.5099, 0.5198, 0.644, 0.9817, 0.8243, 0.5699, 0.9993, 0.8799, 0.514, 0.6374]\n"
     ]
    }
   ],
   "source": [
    "# this bit of code tells us how likely our sample of 50 values is to be anomalous. \n",
    "# The higher the value the more likely that individual element in the \"validation data\" is anomalous\n",
    "mal_scores = [np.round(anomaly_score(x, dist), 4) for x in val_errors]\n",
    "print(mal_scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0, 0.9962, 0.9999, 0.9817, 0.9993]\n"
     ]
    }
   ],
   "source": [
    "anomalies = [mal_scores[i] for i in indices]\n",
    "print(anomalies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>High Risk Date</th>\n",
       "      <th>Time Accessed</th>\n",
       "      <th>Anomaly Value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11/13/2019</td>\n",
       "      <td>16.408068</td>\n",
       "      <td>1.0000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4/22/2020</td>\n",
       "      <td>14.191438</td>\n",
       "      <td>0.9962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4/28/2020</td>\n",
       "      <td>23.218880</td>\n",
       "      <td>0.9999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5/8/2020</td>\n",
       "      <td>12.723234</td>\n",
       "      <td>0.9817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5/9/2020</td>\n",
       "      <td>22.471438</td>\n",
       "      <td>0.9993</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  High Risk Date  Time Accessed  Anomaly Value\n",
       "0     11/13/2019      16.408068         1.0000\n",
       "1      4/22/2020      14.191438         0.9962\n",
       "2      4/28/2020      23.218880         0.9999\n",
       "3       5/8/2020      12.723234         0.9817\n",
       "4       5/9/2020      22.471438         0.9993"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# put it all together\n",
    "anomalies_df = pd.DataFrame(list(zip(mal_dates, mal_decimals, anomalies)), columns = ['High Risk Date', 'Time Accessed', 'Anomaly Value']) \n",
    "anomalies_df "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
